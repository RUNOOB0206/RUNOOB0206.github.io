<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web安全 搭建安全拓展</title>
      <link href="/2022/03/22/Web%20Sec3/"/>
      <url>/2022/03/22/Web%20Sec3/</url>
      
        <content type="html"><![CDATA[<p>此文章基于看B站小迪安全视频和结合CSDN文章后整理诞生。</p><h1 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h1><ul><li>常见搭建平台脚本启用</li><li>域名IP目录解析安全问题</li><li>常见文件后缀解析对应安全</li><li>常见安全测试中的安全防护</li><li>web后门与用户及文件权限</li></ul><h1 id="常见搭建平台脚本启用"><a href="#常见搭建平台脚本启用" class="headerlink" title="常见搭建平台脚本启用"></a>常见搭建平台脚本启用</h1><p>ASP,PHP,SPX,JSP,PY,JAVAWEB等环境<br>平台：IIS为例<br><img src="https://img-blog.csdnimg.cn/20210626213253792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt="  "></p><h1 id="域名IP目录解析安全问题"><a href="#域名IP目录解析安全问题" class="headerlink" title="域名IP目录解析安全问题"></a>域名IP目录解析安全问题</h1><p>使用ip和地址去访问相同的路径可能存在不同的情况。ip地址的层级高于地址，使用ip地址进行访问一般获取的信息会更多。可能是程序源码备份文件和敏感信息，扫域名只能发现一个文件夹下的所有文件。IP访问在域名访问的上一级，会扫描到更多，源码备份，打包文件。</p><h1 id="常见文件后缀解析对安全"><a href="#常见文件后缀解析对安全" class="headerlink" title="常见文件后缀解析对安全"></a>常见文件后缀解析对安全</h1><p>存在下载或为解析问题。对于.asp的网站，可以使用.cpx等的结尾。文件上传漏洞中可能会存在这种问题。<br><img src="https://img-blog.csdnimg.cn/20210626213339866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "></p><h1 id="常见安全测试中的安全防护"><a href="#常见安全测试中的安全防护" class="headerlink" title="常见安全测试中的安全防护"></a>常见安全测试中的安全防护</h1><p>是否匿名访问：基于用户的限制<br><img src="https://img-blog.csdnimg.cn/20210626213349505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210626213356473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "><br>是否使用IP和域名访问：设置拒绝访问的IP（白名单、黑名单设置)<br><img src="https://img-blog.csdnimg.cn/20210626213410147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20210626213419913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "></p><h1 id="WEB后门与用户及文件权限"><a href="#WEB后门与用户及文件权限" class="headerlink" title="WEB后门与用户及文件权限"></a>WEB后门与用户及文件权限</h1><p>• 后门是否给予执行权限<br>• 后门是否给予操作目录或文件权限<br>• 后门是否给予其他用户权限<br><img src="https://img-blog.csdnimg.cn/20210626213834500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "><br>后门对文件的操作必须要有相应的操作权限才可以。<br>绕过思路：将后门放到其他可这行的路径。</p><h1 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h1><h2 id="基于中间件的简要识别"><a href="#基于中间件的简要识别" class="headerlink" title="基于中间件的简要识别"></a>基于中间件的简要识别</h2><p>一般在浏览器的返回的信息中就能看出来是什么中间件，App同理，可查看抓包的返回信息。<br><img src="https://img-blog.csdnimg.cn/20210626213444183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="基于中间件的安全漏洞"><a href="#基于中间件的安全漏洞" class="headerlink" title="基于中间件的安全漏洞"></a>基于中间件的安全漏洞</h2><p>参考：<a href="https://www.freebuf.com/articles/web/192063.html">https://www.freebuf.com/articles/web/192063.html</a><br>     <a href="https://pan.baidu.com/s/1Qm1KcVovMI-nGxt_vCjYkQ">https://pan.baidu.com/s/1Qm1KcVovMI-nGxt_vCjYkQ</a> </p><h2 id="基于中间件的靶场使用"><a href="#基于中间件的靶场使用" class="headerlink" title="基于中间件的靶场使用"></a>基于中间件的靶场使用</h2><h2 id="靶场：vulhub（链接：https-vulhub-org-）"><a href="#靶场：vulhub（链接：https-vulhub-org-）" class="headerlink" title="靶场：vulhub（链接：https://vulhub.org/）"></a>靶场：vulhub（链接：<a href="https://vulhub.org/%EF%BC%89">https://vulhub.org/）</a></h2><p>版权声明：本文参考<a href="https://blog.csdn.net/weixin_51446936/article/details/118254827?spm=1001.2014.3001.5502">CSDN博主「要努力。。」</a>的原创文章特附上原文出处链接及声明。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web安全 数据包拓展</title>
      <link href="/2022/03/14/Web%20Sec%202/"/>
      <url>/2022/03/14/Web%20Sec%202/</url>
      
        <content type="html"><![CDATA[<p>此文章基于看B站小迪安全视频和整合网上相关资源后整理诞生。</p><h1 id="https-amp-http"><a href="#https-amp-http" class="headerlink" title="https&amp;http"></a>https&amp;http</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/5e946f9da3e234a4695d2eb055b66d5d.png#pic_center" alt="  "></p><pre><code>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。 </code></pre><h2 id="HTTP-HTTPS具体区别？"><a href="#HTTP-HTTPS具体区别？" class="headerlink" title="HTTP/HTTPS具体区别？"></a>HTTP/HTTPS具体区别？</h2><ul><li>HTTPS简要通信过程（见上图）</li><li>http加载速度比https快，因为https多了个加密过程</li><li>http捕获的信息是明文，而https就是加密了</li><li>http简要通信过程</li><li>建立连接-&gt;发送请求数据包-&gt;返回响应数据包-&gt;关闭连接</li><li>浏览器建立与web服务器之间的连接</li><li>浏览器将请求数据打包（生成请求数据包）并发到web服务器</li><li>web服务器将处理结果打包（生成相应数据包）并发送给浏览器</li><li>web服务器关闭连接</li></ul><h1 id="Request-请求数据包数据格式"><a href="#Request-请求数据包数据格式" class="headerlink" title="Request 请求数据包数据格式"></a>Request 请求数据包数据格式</h1><h2 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a>Request Headers</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /adduser HTTP/1.1</span><br><span class="line">Host: localhost:8030</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 16</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Origin: chrome-extension://fdmmgilgnpjigdojojpjoooidkmcomcm</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)</span><br><span class="line">Chrome/66.0.3359.181 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: +/+</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br></pre></td></tr></table></figure><h2 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h2><ul><li>ame=name&amp;age=11<h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2></li><li>请求行由三个标记组成：请求方法、请求 URL 和 HTTP 版本，它们用空格分享。</li><li>例如：GET /index.html HTTP/1.1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP 规划定义了 8 种可能的请求方法：</span><br><span class="line">GET：检索 URL 中标识资源的一个简单请求</span><br><span class="line">HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档</span><br><span class="line">POST：服务器接受被写入客户端输出流中的数据的请求</span><br><span class="line">PUT：服务器保存请求数据作为指定 URL 新内容的请求</span><br><span class="line">DELETE：服务器删除 URL 中命令的资源的请求</span><br><span class="line">OPTIONS：关于服务器支持的请求方法信息的请求</span><br><span class="line">TRACE：web 服务器反馈 Http 请求和其头标的请求</span><br><span class="line">CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理</span><br></pre></td></tr></table></figure><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。</span><br><span class="line">HOST: 主机或域名地址</span><br><span class="line">Accept：指浏览器或其他客户可以接爱的 MIME 文件格式。Servlet 可以根据它判断并返回适当的文件格</span><br><span class="line">式。</span><br><span class="line">User-Agent：是客户浏览器名称</span><br><span class="line">Host：对应网址 URL 中的 Web 名称和端口号。</span><br><span class="line">Accept-Langeuage：指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。</span><br><span class="line">connection：用来告诉服务器是否可以维持固定的 HTTP 连接。http 是无连接的，HTTP/1.1 使用 Keep-Alive</span><br><span class="line">为默认值，这样，当浏览器需要多个文件时(比如一个 HTML 文件和相关的图形文件)，不需要每次都建立</span><br><span class="line">连接</span><br><span class="line">Cookie：浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载</span><br><span class="line">和服务器相关的用户信息，也可以用来实现会话功能。</span><br><span class="line">Referer ： 表 明 产 生 请 求 的 网 页 URL 。 如 比 从 网 页 /icconcept/index.jsp 中 点 击 一 个 链 接 到 网 页</span><br><span class="line">/icwork/search ， 在 向 服 务 器 发 送 的 GET/icwork/search 中 的 请 求 中 ， Referer 是</span><br><span class="line">http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪 Web 请求是从什么网站来的。</span><br><span class="line">Content-Type：用来表名 request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。</span><br><span class="line">Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1.</span><br><span class="line">Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加</span><br><span class="line">速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。</span><br></pre></td></tr></table></figure><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2></li><li>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。<h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2></li><li>使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。</li></ul><h1 id="Response-返回数据包数据格式"><a href="#Response-返回数据包数据格式" class="headerlink" title="Response 返回数据包数据格式"></a>Response 返回数据包数据格式</h1><h2 id="Response-返回数据包数据格式-1"><a href="#Response-返回数据包数据格式-1" class="headerlink" title="Response 返回数据包数据格式"></a>Response 返回数据包数据格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个响应由四个部分组成；状态行、响应头标、空行、响应数据。</span><br><span class="line">1.状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔</span><br><span class="line">2.响应头标：包含服务器类型、日期、长度、内容类型等</span><br><span class="line">3.空行：响应头与响应体之间用空行隔开</span><br><span class="line">4.响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面</span><br></pre></td></tr></table></figure><h2 id="HTTP-响应码："><a href="#HTTP-响应码：" class="headerlink" title="HTTP 响应码："></a>HTTP 响应码：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1xx：信息，请求收到，继续处理</span><br><span class="line">2xx：成功，行为被成功地接受、理解和采纳</span><br><span class="line">3xx：重定向，为了完成请求，必须进一步执行的动作</span><br><span class="line">4xx：客户端错误</span><br><span class="line">5xx：服务器错</span><br><span class="line">200 存在文件</span><br><span class="line">403 存在文件夹</span><br><span class="line">3xx 均可能存在</span><br><span class="line">404 不存在文件及文件夹</span><br><span class="line">500 均可能存在</span><br></pre></td></tr></table></figure><h2 id="响应标头"><a href="#响应标头" class="headerlink" title="响应标头"></a>响应标头</h2><p>像请求头标一样，它们能够指出服务器的功能，标识出响应数据的细节</p><h2 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h2><p>最后一个响应头标后是一个空行，发送回车符合退行，表明服务器以下不再有头标</p><h2 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h2><p>HTML文本和图像等，也就是HTML本身</p><h1 id="小迪安全视频涉及案例"><a href="#小迪安全视频涉及案例" class="headerlink" title="小迪安全视频涉及案例"></a><a href="https://www.bilibili.com/video/BV1JZ4y1c7ro?p=2">小迪安全视频</a>涉及案例</h1><ul><li>Burpsuite抓包修改测试</li><li>敏感文件扫描工具简要实现</li><li>第三方检测修改实现XSS攻击</li><li>数据包相关检验对比（APP与直接访问）</li><li>CTF或实际运用中部分考题解析（mozhe）</li></ul><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="https://www.mozhe.cn/">https://www.mozhe.cn/</a> <a href="https://www.mozhe.cn/bug/N2dmMnp1b1VYd2EzLzBNR3MvRVlIZz09bW96aGUmozhe">https://www.mozhe.cn/bug/N2dmMnp1b1VYd2EzLzBNR3MvRVlIZz09bW96aGUmozhe</a></p><hr><p>版权声明：本文参考<a href="https://mp.weixin.qq.com/s?__biz=Mzg5MDY2MTUyMA==&mid=2247485507&idx=1&sn=06027d2f480ccf9f0ef6814150b2362d&chksm=cfd877bcf8affeaaabb1b69fd046155ccfe3eaf0a8f155a74af88f1133a4da7a5aeec41ee889&scene=21#wechat_redirect">微信公众号：0x00实验室原创文章</a>和<a href="https://blog.csdn.net/weixin_45889197/article/details/118978650">CSDN博主「是阿明呐」的原创文章</a>特附上原文出处链接及声明。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web安全 入门概念名词</title>
      <link href="/2022/03/01/Web%20Sec/"/>
      <url>/2022/03/01/Web%20Sec/</url>
      
        <content type="html"><![CDATA[<p>此文章基于看B站小迪安全视频和结合CSDN文章后整理诞生。</p><p><img src="https://img-blog.csdnimg.cn/2021062314532754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt="入门概念树状图"></p><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><h2 id="What-is-域名？"><a href="#What-is-域名？" class="headerlink" title="What is 域名？"></a>What is 域名？</h2><p>可以简单的说：地址的名称称为域名，例：<a href="http://www.baidu.com/">www.baidu.com</a><br>域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。<br>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名。即IP地址对应的主机名<br>比如：<a href="http://www.wikipedia.org是一个域名,www.baidu.com也是域名等/">www.wikipedia.org是一个域名，www.baidu.com也是域名等</a></p><h2 id="域名在哪里注册"><a href="#域名在哪里注册" class="headerlink" title="域名在哪里注册"></a>域名在哪里注册</h2><p>腾讯云、阿里云、华为云</p><h2 id="什么是二级域名？多级域名？"><a href="#什么是二级域名？多级域名？" class="headerlink" title="什么是二级域名？多级域名？"></a>什么是二级域名？多级域名？</h2><h3 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a>顶级域名</h3><p>（1）国家顶级域名（national top-level domainnames，简称nTLDs）<br>200多个国家都按照ISO3166国家代码分配了顶级域名，例如中国是cn，美国是us，日本是jp等<br>（2）国际顶级域名（international top-level domain names，简称iTDs）<br>例如表示工商企业的 .Com、.top，表示网络提供商的.net，表示非盈利组织的.org，表示教育的.edu等</p><h3 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h3><p>二级域名是指顶级域名之下的域名，在国际顶级域名下，它是指域名注册人的网上名称，例如 ibm，yahoo，microsoft等；在国家顶级域名下，它是表示注册企业类别的符号，例如top，com，edu，gov，net等。<br>我国在国际互连网络信息中心（Inter NIC） 正式注册并运行的顶级域名是CN，这也是我国的一级域名。在顶级域名之下，我国的二级域名又分为类别域名和行政区域名两类。类别域名共6个， 包括用于科研机构的ac；用于工商金融企业的com、top；用于教育机构的edu；用于政府部门的 gov；用于互联网络信息中心和运行中心的net；用于非盈利组织的org。而行政区域名有34个，分别对应于我国各省、自治区和直辖市。</p><h3 id="三级域名"><a href="#三级域名" class="headerlink" title="三级域名"></a>三级域名</h3><p>三级域名用字母（ A～Z，a～z，大小写等）、数字（0～9）和连接符（－）组成， 各级域名之间用实点（.）连接，三级域名的长度不能超过20个字符。 如无特殊原因，建议采用申请人的英文名（或者缩写）或者汉语拼音名（或者缩写） 作为三级域名，以保持域名的清晰性和简洁性。<br>参考：百度百科-域名注册</p><h2 id="域名发现对安全测试有什么意义？"><a href="#域名发现对安全测试有什么意义？" class="headerlink" title="域名发现对安全测试有什么意义？"></a>域名发现对安全测试有什么意义？</h2><p>在渗透过程中，一般要对主域名进行安全检测，如果没有找到漏洞，则对子域名（多级域名）下手，可能会对测试多了一种可能性，从而检测到著主站的漏洞</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="什么是DNS？"><a href="#什么是DNS？" class="headerlink" title="什么是DNS？"></a>什么是DNS？</h2><p>网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。也就是将域名转换为IP地址<br>域名就相当于一个电话簿，当我们想要打电话时，不用去记住每个人的电话，直接去调用它的名字即可，因为我们的电话簿里已经有我们想要打电话的那个人的号码了。</p><h2 id="本地Hosts与DNS的关系"><a href="#本地Hosts与DNS的关系" class="headerlink" title="本地Hosts与DNS的关系"></a>本地Hosts与DNS的关系</h2><p>Hosts<br>hosts是一个没有扩展名的系统文件，可以用记事本打开。其作用就是将一些常用的域名与其对应的IP地址建立联系<br>地址：C:\Windows\System32\drivers\etc\hosts</p><p><a href="https://img-blog.csdnimg.cn/20210623143428574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20210623143428574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70</a></p><h2 id="Hosts与DNS的联系"><a href="#Hosts与DNS的联系" class="headerlink" title="Hosts与DNS的联系"></a>Hosts与DNS的联系</h2><p>当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。也就是说，Hosts的请求别级比DNS高</p><h2 id="Hosts与DNS的区别"><a href="#Hosts与DNS的区别" class="headerlink" title="Hosts与DNS的区别"></a>Hosts与DNS的区别</h2><p>DNS也是用来解析IP地址的，只不过hosts文件用户可以自由修改，但DNS上的内容用户是无法修改的，只可以选择使用哪个DNS服务。一般默认使用电信服务商，但也可以选择第三方服务，如Google，阿里，百度等。</p><h2 id="实验演示"><a href="#实验演示" class="headerlink" title="实验演示"></a>实验演示</h2><p>先ping一下百度<br><img src="https://img-blog.csdnimg.cn/20210623143428574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "></p><p>修改hosts文件，将域名baidu.com的ip映射为127.0.0.1<br><img src="https://img-blog.csdnimg.cn/20210623143438161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "></p><p>再试着ping<br><img src="https://img-blog.csdnimg.cn/20210623143447792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTQ0NjkzNg==,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="CDN是什么？与DNS的关系"><a href="#CDN是什么？与DNS的关系" class="headerlink" title="CDN是什么？与DNS的关系"></a>CDN是什么？与DNS的关系</h2><h3 id="CDN的全称是Content-Delivery-Network，即内容分发网络。"><a href="#CDN的全称是Content-Delivery-Network，即内容分发网络。" class="headerlink" title="CDN的全称是Content Delivery Network，即内容分发网络。"></a>CDN的全称是Content Delivery Network，即内容分发网络。</h3><p>CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块</p><h3 id="CDN的基本原理"><a href="#CDN的基本原理" class="headerlink" title="CDN的基本原理"></a>CDN的基本原理</h3><p>是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><h3 id="CDN的目的"><a href="#CDN的目的" class="headerlink" title="CDN的目的"></a>CDN的目的</h3><p>使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><h3 id="CDN的关键技术"><a href="#CDN的关键技术" class="headerlink" title="CDN的关键技术"></a>CDN的关键技术</h3><p>主要有内容存储和分发技术。<br>参考：百度百科-CDN</p><p>CDN与DNS的区别与联系.</p><h2 id="常见的DNS安全攻击有哪些"><a href="#常见的DNS安全攻击有哪些" class="headerlink" title="常见的DNS安全攻击有哪些"></a>常见的DNS安全攻击有哪些</h2><p>DNS的常见攻击方式.</p><h1 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h1><h2 id="常见的脚本语言类型有哪些？"><a href="#常见的脚本语言类型有哪些？" class="headerlink" title="常见的脚本语言类型有哪些？"></a>常见的脚本语言类型有哪些？</h2><p>• 脚本语言是为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言<br>• 常见的脚本语言类型：Python、JavaScript、Asp (逐渐淘汰，基本都是小站点在使用)、Aspx、php （目前比较流行）javaweb、 pl、cgi等</p><h2 id="不同脚本类型与安全漏洞的关系"><a href="#不同脚本类型与安全漏洞的关系" class="headerlink" title="不同脚本类型与安全漏洞的关系"></a>不同脚本类型与安全漏洞的关系</h2><p>不同的脚本语言的编写规则不一样，程序产生的漏洞自然也不一样（代码审计）。</p><h2 id="漏洞挖掘代码审计与脚本漏洞的关系"><a href="#漏洞挖掘代码审计与脚本漏洞的关系" class="headerlink" title="漏洞挖掘代码审计与脚本漏洞的关系"></a>漏洞挖掘代码审计与脚本漏洞的关系</h2><p>更严谨的语言，安全性相对更高</p><h1 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h1><h2 id="什么是后门？有哪些后门？"><a href="#什么是后门？有哪些后门？" class="headerlink" title="什么是后门？有哪些后门？"></a>什么是后门？有哪些后门？</h2><h3 id="什么是后门"><a href="#什么是后门" class="headerlink" title="什么是后门"></a>什么是后门</h3><p>是指一种绕过安全性控制而获取对程序或系统访问权的方法。在软件的开发阶段，程序员常会在软件内创建后门以便可以修改程序中的缺陷。如果后门被其他人知道，或者在发布软件之前没有删除，那么它就成了安全风险，容易被黑客当成漏洞进行攻击。</p><h3 id="后门的分类"><a href="#后门的分类" class="headerlink" title="后门的分类"></a>后门的分类</h3><h4 id="•-网页后门"><a href="#•-网页后门" class="headerlink" title="• 网页后门"></a>• 网页后门</h4><p>此类后门程序一般都是服务器上正常 的web服务来构造自己的连接方式，比如非常流行的ASP、cgi脚本后门等。</p><h4 id="•-线程插入后门"><a href="#•-线程插入后门" class="headerlink" title="• 线程插入后门"></a>• 线程插入后门</h4><p>这种后门在运行时没有进程,所有网络操作均播入到其他应用程序的进程中完成。也就是说，即使受控制端安装的防火墙拥有“应用程序访问权限”的功能，也不能对这样的后门进行有效的警告和拦截，也就使对方的防火墙形同虚设了!因为对它的查杀比较困难，这种后门本身的功能比较强大，是“居中家旅行、入侵攻击”的必备品哦!</p><h4 id="•-扩展后门"><a href="#•-扩展后门" class="headerlink" title="• 扩展后门"></a>• 扩展后门</h4><p>所谓的扩展后门，在普通意义上理解，可以看成是将非常多的功能集成到了后门里，让后门本身就可以实现很多功能，方便直接控制肉鸡或者服务器，这类的后门非常受初学者的喜爱，通常集成了文件上传/下载、系统用户检测、HTTP访问、终端安装、端口开放、启动/停止服务等功能，本身就是个小的工具包，功能强大。</p><h4 id="•-C-S后门"><a href="#•-C-S后门" class="headerlink" title="• C/S后门"></a>• C/S后门</h4><p>传统的木马程序常常使用C/S构架，这样的构架很方便控制，也在一定程度上避免了“万能密码”的情况出现，对后门私有化有一定的贡献，这方面分类比较模糊，很多后门可以归结到此类中，比如较巧妙的就是ICMP Door了</p><h4 id="•-账号后门"><a href="#•-账号后门" class="headerlink" title="• 账号后门"></a>• 账号后门</h4><p>账号后门技术是指黑客为了长期控制目标计算机，通过后门在目标计算机中建立一个备用管理员账户的技术。一般采用克隆账户技术。克隆账户一般有两种方式，一个是手动克隆账户，一个是使用克隆工具。</p><p>注：具体参考百度百科-后门程序</p><h2 id="后门在安全测试中的实际意义"><a href="#后门在安全测试中的实际意义" class="headerlink" title="后门在安全测试中的实际意义"></a>后门在安全测试中的实际意义</h2><p>在获取到相关权限的时候，后门就相当于一个管道，提供一个通道去连接网站或者服务器，使得攻击者可以控制整个网站或者服务器去达到自己的目标</p><h2 id="关于后门需要了解哪些？（玩法、免杀）"><a href="#关于后门需要了解哪些？（玩法、免杀）" class="headerlink" title="关于后门需要了解哪些？（玩法、免杀）"></a>关于后门需要了解哪些？（玩法、免杀）</h2><h3 id="•-玩法（创建后门之后我们可以怎么样操作？）："><a href="#•-玩法（创建后门之后我们可以怎么样操作？）：" class="headerlink" title="• 玩法（创建后门之后我们可以怎么样操作？）："></a>• 玩法（创建后门之后我们可以怎么样操作？）：</h3><p>网站后门：便于控制网站<br>软件后门：用于控制<br>服务器后门：可以进行脱库、盗取信息</p><h3 id="•-免杀：防止相关东西检测到后门"><a href="#•-免杀：防止相关东西检测到后门" class="headerlink" title="• 免杀：防止相关东西检测到后门"></a>• 免杀：防止相关东西检测到后门</h3><p>免杀技术全称为反杀毒技术Anti Anti- Virus简称“免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。</p><h3 id="•-技术分类"><a href="#•-技术分类" class="headerlink" title="• 技术分类"></a>• 技术分类</h3><p>1、开源免杀：指在有病毒、木马源代码的前提下，通过修改源代码进行免杀。<br>2、手工免杀：指在仅有病毒、木马的可执行文件(.exe)（PE文件）的情况下进行免杀。</p><p>参考：百度百科-免杀</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web的组成架构模型"><a href="#web的组成架构模型" class="headerlink" title="web的组成架构模型"></a>web的组成架构模型</h2><p>WEB的组成架构模型：网站原码、操作系统、中间件（搭建平台，提供服务的）、数据库。<br>• 网站源码：分脚本类型（不同功能的实现需要不同的语言），分应用方向（方向不同所使用的函数不同）<br>• 操作系统：windows linux<br>• 中间件（搭建平台）：apache iis tomcat nginx等<br>• 数据库：access mysql mssql oracle sybase db2 postsql等。存储了大量与网站相关的数据以及管理员数据</p><h2 id="架构漏洞安全简要测试"><a href="#架构漏洞安全简要测试" class="headerlink" title="架构漏洞安全简要测试"></a>架构漏洞安全简要测试</h2><p>安全测试分为四个层面，包括通信层、应用服务层、系统层、管理层的测试<br>安全测试</p><h2 id="为什么要从web界面为主为首？"><a href="#为什么要从web界面为主为首？" class="headerlink" title="为什么要从web界面为主为首？"></a>为什么要从web界面为主为首？</h2><p>用户接触web层面最多，大部分都是从web页面入手慢慢渗透到服务器。直接从操作系统入手不太现实（大部分情况下接触不到）。</p><h1 id="web安全相关漏洞"><a href="#web安全相关漏洞" class="headerlink" title="web安全相关漏洞"></a>web安全相关漏洞</h1><p>web源码类对应漏洞<br>web中间件对应漏洞</p><h2 id="web数据库对应漏洞"><a href="#web数据库对应漏洞" class="headerlink" title="web数据库对应漏洞"></a>web数据库对应漏洞</h2><p>弱口令、SQL注入等</p><h2 id="web系统层对应漏洞"><a href="#web系统层对应漏洞" class="headerlink" title="web系统层对应漏洞"></a>web系统层对应漏洞</h2><p>提权、代码执行漏洞等。较少，了解即可</p><h2 id="其他第三方对应漏洞"><a href="#其他第三方对应漏洞" class="headerlink" title="其他第三方对应漏洞"></a>其他第三方对应漏洞</h2><p>被利用的第三方ActiveX插件漏洞，涉及迅雷、暴风影音、百度超级搜霸、realplayer等多款常见软件的部分版本中，而且其中多数漏洞曾经是或者现在仍是0day漏洞。它是相对于系统漏洞后一些插件的漏洞来说的,所以叫第三方漏洞。</p><h2 id="APP或者PC应用结合类"><a href="#APP或者PC应用结合类" class="headerlink" title="APP或者PC应用结合类"></a>APP或者PC应用结合类</h2><p>有些APP内核就是网站<br>低情商：懒得多开发<br>高情商：节约开发成本<br>————————————————<br>版权声明：本文参考CSDN博主「要努力。。」的原创文章特附上原文出处链接及声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_51446936/article/details/118152384">https://blog.csdn.net/weixin_51446936/article/details/118152384</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
